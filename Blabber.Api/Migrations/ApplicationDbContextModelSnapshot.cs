// <auto-generated />
using System;
using Blabber.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Blabber.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("Blabber.Api.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "user1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7b0db684-d2d2-4886-b132-2c459dc15855",
                            Email = "user1@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@EXAMPLE.COM",
                            NormalizedUserName = "USER1",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "079d2e11-866c-4184-b68f-56245423c5cf",
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        },
                        new
                        {
                            Id = "user2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bfa8ccf1-3529-4c1f-bfe7-c15cb27a29cc",
                            Email = "user2@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@EXAMPLE.COM",
                            NormalizedUserName = "USER2",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4ea305bb-200d-4141-8478-2a46289849b0",
                            TwoFactorEnabled = false,
                            UserName = "user2"
                        });
                });

            modelBuilder.Entity("Blabber.Api.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayPic")
                        .HasColumnType("TEXT");

                    b.Property<string>("Handle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = "user1",
                            DisplayName = "First Author",
                            Handle = "Author1"
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = "user2",
                            DisplayName = "Second Author",
                            Handle = "Author2"
                        });
                });

            modelBuilder.Entity("Blabber.Api.Models.Blab", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Blabs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            Body = "First blab by Author1",
                            CreatedAt = new DateTime(2024, 7, 21, 12, 48, 13, 745, DateTimeKind.Utc).AddTicks(8669),
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2024, 7, 21, 12, 48, 13, 745, DateTimeKind.Utc).AddTicks(8674)
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            Body = "First blab by Author2",
                            CreatedAt = new DateTime(2024, 7, 21, 12, 48, 13, 745, DateTimeKind.Utc).AddTicks(8677),
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2024, 7, 21, 12, 48, 13, 745, DateTimeKind.Utc).AddTicks(8677)
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 1,
                            Body = "Second blab by Author1",
                            CreatedAt = new DateTime(2024, 7, 21, 12, 48, 13, 745, DateTimeKind.Utc).AddTicks(8679),
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2024, 7, 21, 12, 48, 13, 745, DateTimeKind.Utc).AddTicks(8680)
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 2,
                            Body = "Second blab by Author2",
                            CreatedAt = new DateTime(2024, 7, 21, 12, 48, 13, 745, DateTimeKind.Utc).AddTicks(8682),
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2024, 7, 21, 12, 48, 13, 745, DateTimeKind.Utc).AddTicks(8682)
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 1,
                            Body = "Third blab by Author1",
                            CreatedAt = new DateTime(2024, 7, 21, 12, 48, 13, 745, DateTimeKind.Utc).AddTicks(8683),
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2024, 7, 21, 12, 48, 13, 745, DateTimeKind.Utc).AddTicks(8684)
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 2,
                            Body = "Third blab by Author2",
                            CreatedAt = new DateTime(2024, 7, 21, 12, 48, 13, 745, DateTimeKind.Utc).AddTicks(8685),
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2024, 7, 21, 12, 48, 13, 745, DateTimeKind.Utc).AddTicks(8686)
                        });
                });

            modelBuilder.Entity("Blabber.Api.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BlabId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ParentId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BlabId");

                    b.HasIndex("ParentId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 2,
                            BlabId = 1,
                            Body = "Comment by Author2 on Blab1",
                            CreatedAt = new DateTime(2024, 7, 21, 12, 48, 13, 745, DateTimeKind.Utc).AddTicks(8719),
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2024, 7, 21, 12, 48, 13, 745, DateTimeKind.Utc).AddTicks(8720)
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 1,
                            BlabId = 2,
                            Body = "Comment by Author1 on Blab2",
                            CreatedAt = new DateTime(2024, 7, 21, 12, 48, 13, 745, DateTimeKind.Utc).AddTicks(8722),
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2024, 7, 21, 12, 48, 13, 745, DateTimeKind.Utc).AddTicks(8723)
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 1,
                            BlabId = 1,
                            Body = "Reply by Author1 on Blab1",
                            CreatedAt = new DateTime(2024, 7, 21, 12, 48, 13, 745, DateTimeKind.Utc).AddTicks(8765),
                            IsDeleted = false,
                            ParentId = 1,
                            UpdatedAt = new DateTime(2024, 7, 21, 12, 48, 13, 745, DateTimeKind.Utc).AddTicks(8766)
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 1,
                            BlabId = 5,
                            Body = "Comment by Author1 on Blab5",
                            CreatedAt = new DateTime(2024, 7, 21, 12, 48, 13, 745, DateTimeKind.Utc).AddTicks(8768),
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2024, 7, 21, 12, 48, 13, 745, DateTimeKind.Utc).AddTicks(8768)
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 2,
                            BlabId = 6,
                            Body = "Comment by Author2 on Blab6",
                            CreatedAt = new DateTime(2024, 7, 21, 12, 48, 13, 745, DateTimeKind.Utc).AddTicks(8770),
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2024, 7, 21, 12, 48, 13, 745, DateTimeKind.Utc).AddTicks(8770)
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 2,
                            BlabId = 5,
                            Body = "Reply by Author2 on Blab5",
                            CreatedAt = new DateTime(2024, 7, 21, 12, 48, 13, 745, DateTimeKind.Utc).AddTicks(8772),
                            IsDeleted = false,
                            ParentId = 4,
                            UpdatedAt = new DateTime(2024, 7, 21, 12, 48, 13, 745, DateTimeKind.Utc).AddTicks(8772)
                        });
                });

            modelBuilder.Entity("Followers", b =>
                {
                    b.Property<int>("FollowingId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FollowerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FollowingId", "FollowerId");

                    b.HasIndex("FollowerId");

                    b.ToTable("Followers");

                    b.HasData(
                        new
                        {
                            FollowingId = 2,
                            FollowerId = 1
                        },
                        new
                        {
                            FollowingId = 1,
                            FollowerId = 2
                        });
                });

            modelBuilder.Entity("Likes", b =>
                {
                    b.Property<int>("LikesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LikedId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LikesId", "LikedId");

                    b.HasIndex("LikedId");

                    b.ToTable("Likes");

                    b.HasData(
                        new
                        {
                            LikesId = 2,
                            LikedId = 1
                        },
                        new
                        {
                            LikesId = 1,
                            LikedId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Blabber.Api.Models.Author", b =>
                {
                    b.HasOne("Blabber.Api.Data.ApplicationUser", "ApplicationUser")
                        .WithOne("Author")
                        .HasForeignKey("Blabber.Api.Models.Author", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Blabber.Api.Models.Blab", b =>
                {
                    b.HasOne("Blabber.Api.Models.Author", "Author")
                        .WithMany("Blabs")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Blabber.Api.Models.Comment", b =>
                {
                    b.HasOne("Blabber.Api.Models.Author", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blabber.Api.Models.Blab", "Blab")
                        .WithMany("Comments")
                        .HasForeignKey("BlabId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blabber.Api.Models.Comment", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Author");

                    b.Navigation("Blab");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Followers", b =>
                {
                    b.HasOne("Blabber.Api.Models.Author", null)
                        .WithMany()
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blabber.Api.Models.Author", null)
                        .WithMany()
                        .HasForeignKey("FollowingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Likes", b =>
                {
                    b.HasOne("Blabber.Api.Models.Author", null)
                        .WithMany()
                        .HasForeignKey("LikedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blabber.Api.Models.Blab", null)
                        .WithMany()
                        .HasForeignKey("LikesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Blabber.Api.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Blabber.Api.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blabber.Api.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Blabber.Api.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Blabber.Api.Data.ApplicationUser", b =>
                {
                    b.Navigation("Author");
                });

            modelBuilder.Entity("Blabber.Api.Models.Author", b =>
                {
                    b.Navigation("Blabs");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Blabber.Api.Models.Blab", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Blabber.Api.Models.Comment", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
